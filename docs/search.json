[
  {
    "objectID": "competition.html",
    "href": "competition.html",
    "title": "Datathon: Competition",
    "section": "",
    "text": "The Channel Islands are a chain of eight islands located off the southern coast of California in the Pacific Ocean. They are known for their stunning natural beauty, ecological richness, and deep cultural history.\n\n\n\nSan Miguel Island\nSanta Rosa Island\nSanta Cruz Island\nAnacapa Island\nSanta Barbara Island\nSan Nicolas Island\nSan Clemente Island\nSanta Catalina Island\n\n\n\n\n\nIncludes five islands: San Miguel, Santa Rosa, Santa Cruz, Anacapa, and Santa Barbara.\nSometimes called the “Galápagos of North America” for its rich biodiversity and many endemic species.\nAccessible only by boat or small plane.\nIdeal for hiking, kayaking, camping, and wildlife observation.\n\n\n\n\n\nOriginally inhabited by Chumash and Tongva indigenious groups for thousands of years.\nHome to important archaeological and cultural heritage sites."
  },
  {
    "objectID": "competition.html#channel-islands",
    "href": "competition.html#channel-islands",
    "title": "Datathon: Competition",
    "section": "",
    "text": "The Channel Islands are a chain of eight islands located off the southern coast of California in the Pacific Ocean. They are known for their stunning natural beauty, ecological richness, and deep cultural history.\n\n\n\nSan Miguel Island\nSanta Rosa Island\nSanta Cruz Island\nAnacapa Island\nSanta Barbara Island\nSan Nicolas Island\nSan Clemente Island\nSanta Catalina Island\n\n\n\n\n\nIncludes five islands: San Miguel, Santa Rosa, Santa Cruz, Anacapa, and Santa Barbara.\nSometimes called the “Galápagos of North America” for its rich biodiversity and many endemic species.\nAccessible only by boat or small plane.\nIdeal for hiking, kayaking, camping, and wildlife observation.\n\n\n\n\n\nOriginally inhabited by Chumash and Tongva indigenious groups for thousands of years.\nHome to important archaeological and cultural heritage sites."
  },
  {
    "objectID": "competition.html#island-fox-urocyon-littoralis",
    "href": "competition.html#island-fox-urocyon-littoralis",
    "title": "Datathon: Competition",
    "section": "Island Fox (Urocyon littoralis)",
    "text": "Island Fox (Urocyon littoralis)\nThe island fox is a small, charismatic canid species endemic to six of the eight Channel Islands off the coast of southern California. It’s one of the best examples of island dwarfism, having evolved from the mainland gray fox (Urocyon cinereoargenteus) to become significantly smaller.\nIn the 1990s, several island fox populations faced near extinction due to golden eagle predation, canine distemper virus, and habitat degradation. The island fox was listed as endangered in 2004. Recovery efforts of the island fox included removal of golden eagles, vaccination and captive breeding programs, reintroduction of native bald eagles, and habitat restoration."
  },
  {
    "objectID": "competition.html#competition",
    "href": "competition.html#competition",
    "title": "Datathon: Competition",
    "section": "Competition",
    "text": "Competition\nFor the competition, you will investigate one of the two sections, Fox Weight or Fox Reproductive Status. Follow the guidelines in the section of your choice and complete one of the challenges. You may also analyze the data in any other way or work on the other section, but it is not necessary. Afterwards, create a presentation using google slides. Share the slides to the lead instructor in the classroom. They will provide their email on the board.\n\nAnalysis\nUsing the tutorial and example analysis, complete at least one of the challenges.\n\n\nSlides and Presentation\nThe slides will be used for a presentation, in the last 30 minutes. You should have no more than 5 slides displaying what your findings are. Here is an example of the slides you should submit:\n\nTitle Slide\n\nCome up with a creative title for your analysis.\nInclude the names of all your group members.\nInclude Team Name\nProvide what you have analyzed\n\nNumerical Results\n\nProvide information about the results you found.\n\nPlots\n\nProvide any plots.\n\nConclusions\n\nAnswer your research question.\n\n\nAn Example can be found here."
  },
  {
    "objectID": "competition.html#data-and-prep",
    "href": "competition.html#data-and-prep",
    "title": "Datathon: Competition",
    "section": "Data and Prep",
    "text": "Data and Prep\nThe data provided is part of an ongoing longitudinal study from 2014 to 2016 of trap monitoring. This resulted in collection of 4,975 recorded trap observations, which may have contained a fox or not. Other information collected from the fox were Sex, Age Class, Weight, Body Condition, Reproductive Status, and Vaccinations. Information of the data collected can be found in the Databook.\nYou can download the data and script files here. (Password: dolphins_2025) Downolad, unzip file, load R project, and select “datathon.R” file to follow datathon document.For more help, watch this video\n\nInstalling and Loading Packages\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n\nLoading Data\nWe will need to load the data into R using the read_csv function.\n\ndf &lt;- cidf &lt;- read_csv(\"data_for_csuci_datathon_2014_2016.csv\") # Loads the Data Set into the objects df and cidf\n\n\n\nCleaning Data\n\nRenaming Categories\nLooking at the Databook, the variables Vaccinations, ReproductiveStatus and BodyCondition have interesting ways they are coded. In Vaccinations, missing values (NA) are considered as not vaccinated; therefore, changing the missing to “NV” will ensure that they are correctly classified, see data book. In ReproductiveStatus, the missing values (NA) indicate unknown reproductive status. In BodyCondition, the numerical values 1, 2, 3, 4, and 5, represent a condition. To make the condition easier, we will convert them to the categories. Run the code below to alter them:\n\ndf &lt;- df |&gt; mutate( # Will change the variables in the df data set\n    Vaccinations = case_when(is.na(Vaccinations) ~ \"NV\", .default = Vaccinations), # Reclassifies Missing Data in Vaccination as \"N\" per code book.\n    ReproductiveStatus = case_when(is.na(ReproductiveStatus) ~ \"UN\", .default = ReproductiveStatus), # Reclassifies Missing Data in Vaccination as \"N\" per code book.\n    BodyCondition = case_when( # Begins to modify BodyCondition\n        as.character(BodyCondition) == \"1\" ~ \"emaciated\", # Changes 1 to emaciated\n        as.character(BodyCondition) == \"2\" ~ \"thin\", # Changes 2 to thin\n        as.character(BodyCondition) == \"3\" ~ \"healthy wild\", # Changes 3 to healthy wild \n        as.character(BodyCondition) == \"4\" ~ \"extra fat reserves\", # Changes 4 to Extra Fat Reserve\n        as.character(BodyCondition) == \"5\" ~ \"extreme fat reserves\" # Changes 5 to Extreme Fat Reserves\n        )\n    )\n\n\n\nMissing Values\nSeveral variables in the data set may have missing values. Using the summary(), we can determine which variables have missing values by looking at the “NA’s” category.\n\nsummary(df)\n\n    Island           SamplingYear    GridCode        \n Length:4975        Min.   :2014   Length:4975       \n Class :character   1st Qu.:2014   Class :character  \n Mode  :character   Median :2015   Mode  :character  \n                    Mean   :2015                     \n                    3rd Qu.:2016                     \n                    Max.   :2016                     \n                                                     \n    TrapDate                       NightNumber      TrapNumber    \n Min.   :2014-07-16 00:00:00.00   Min.   :1.000   Min.   :  1.00  \n 1st Qu.:2014-08-24 00:00:00.00   1st Qu.:2.000   1st Qu.:  4.00  \n Median :2015-08-12 00:00:00.00   Median :3.000   Median :  8.00  \n Mean   :2015-08-25 01:31:27.92   Mean   :3.392   Mean   : 18.87  \n 3rd Qu.:2016-08-18 00:00:00.00   3rd Qu.:5.000   3rd Qu.: 11.00  \n Max.   :2016-11-30 00:00:00.00   Max.   :6.000   Max.   :108.00  \n                                                                  \n  TrapResult           Pittag          CaptureType            Sex           \n Length:4975        Length:4975        Length:4975        Length:4975       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    AgeClass         Weight       Weight_units       BodyCondition     \n Min.   :0.000   Min.   :  0.72   Length:4975        Length:4975       \n 1st Qu.:1.000   1st Qu.:  1.73   Class :character   Class :character  \n Median :1.000   Median :  2.02   Mode  :character   Mode  :character  \n Mean   :1.557   Mean   : 49.49                                        \n 3rd Qu.:3.000   3rd Qu.:  2.30                                        \n Max.   :4.000   Max.   :910.00                                        \n NA's   :2840    NA's   :2808                                          \n ReproductiveStatus Vaccinations      \n Length:4975        Length:4975       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\n\nWe notice that the variables AgeClass, Weight, and BodyCondition have missing values. For this analysis, we will remove the missing values (NA).\n\ndf &lt;- drop_na(df, AgeClass, Weight, BodyCondition) # Removes the missing values (NA) using the variables AgeClass, Weight, and BodyCondition\n\nAfter cleaning the data, this should result in 1,967 recorded foxes!\n\nnrow(df)\n\n[1] 1967"
  },
  {
    "objectID": "competition.html#fox-weight",
    "href": "competition.html#fox-weight",
    "title": "Datathon: Competition",
    "section": "Fox Weight Analysis",
    "text": "Fox Weight Analysis\nImagine you’re a field biologist tracking animal health across the remote Santa Rosa and San Miguel Islands. You’ve noticed that some animals seem heavier in certain years—but is it just your imagination, or is there a real trend?\nThe Weght variable contains information of the Fox’s weight in killogrgms. Let’s start by calculating the mean weight and standard deviation of weight using mean() and sd() functions:\n\nmean_weight&lt;-mean(df$Weight)\nsd_weight&lt;-sd(df$Weight)\nmean_weight\n\n[1] 1.940275\n\nsd_weight #printing the values\n\n[1] 0.4140872\n\n\nWe see that mean weght of fox is about 1.9 kg with standard deviation about .41 kg.\nWe will use the table() and prop.table() function to get the frequencies and proportions for the Sex.\n\ncount_df &lt;- table(df$Sex) # Using the 'Sex' variable from the `df` data set, we count the frequencies of each category with the table function and storing it in rs_df.\ncount_df # Printing out the contents of \"rs_df\"\n\n\nFemale   Male \n   923   1044 \n\n\nUsing the table() function, we can see that there are 923 female and 1044 male Foxes.\n\nprop.table(count_df) # Computing the Proportions of \"rs_df\"\n\n\n   Female      Male \n0.4692425 0.5307575 \n\n\nUsing the prop.table() function, we can see that that there are slightly more male Foxes (about 53%) vs. female Foxes (about 47%).\nWe can visualize the data using the ggplot functions:\n\nggplot(df) + # Setting up the data to create a plot.\n  geom_bar(aes(Sex)) # Creating a bar chart based on the variable \"ReproductiveStatus\"\n\n\n\n\n\n\n\n\nThe bar plot demonstrates that there are more males than females.\n\nWeight vs Sex\nLet’s visualize the variable Weight and Sex with a box plot using ggplot:\n\nggplot(df, aes(x = Sex, y = Weight)) +\n  geom_boxplot() +\n  labs(\n    title = \"Boxplot of Weight by Sex\",\n    x = \"Sex\",\n    y = \"Weight\"\n  )\n\n\n\n\n\n\n\n\nFrom the box plot we see that male Foxs are slightly heavier than female Foxes.\nWe can use group_by() function to separate male from female population and calculate mean and standard deviation separately:\n\nweight_summary &lt;- df %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(\n    mean_weight = mean(Weight),\n    sd_weight = sd(Weight),\n    .groups = \"drop\"\n  )\nweight_summary\n\n# A tibble: 2 × 3\n  Sex    mean_weight sd_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n1 Female        1.88     0.386\n2 Male          1.99     0.431\n\n\nThis table confirms that male Foxes are slightly heavier, about 1.99 kg, than female Foxes, about 1.88 kg, with standard deviations also slightly higher for male Foxes.\n\nWeight vs Sex over time\nTo see weight vs sex trend over time we can use group_by() and ggplot functions again:\n\nweight_summary_yearly &lt;- df %&gt;%\n  group_by(Sex, SamplingYear) %&gt;%\n  summarise(\n    mean_weight = mean(Weight, na.rm = TRUE),\n    sd_weight = sd(Weight, na.rm = TRUE),\n    .groups = \"drop\"\n  ) #group the data by Sex and Year and calculate mean and standard deviation of weight\nweight_summary_yearly\n\n# A tibble: 6 × 4\n  Sex    SamplingYear mean_weight sd_weight\n  &lt;chr&gt;         &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 Female         2014        1.95     0.362\n2 Female         2015        1.85     0.409\n3 Female         2016        1.86     0.373\n4 Male           2014        2.08     0.405\n5 Male           2015        1.95     0.451\n6 Male           2016        1.99     0.419\n\n\nFrom the table we see a downward trend in weight for both females and males. Let’s plot it on the graph:\n\nggplot(weight_summary_yearly, aes(x = SamplingYear, y = mean_weight)) +\n  geom_line() +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean_weight - sd_weight,\n                    ymax = mean_weight + sd_weight), width = 0.2) +\n  facet_wrap(~ Sex) +\n  labs(\n    title = \"Average Weight by Year and Sex\",\n    y = \"Mean Weight\",\n    x = \"Year\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeight vs Sex over time by Island\n\n\n\nTake a moment to conduct the same analysis for different Islands separately and comment on the trends you see:\n\n#Santa Rosa Fox population \n\nSR_df&lt;-filter(df,Island==\"SRI\")\n\n#San Miguel Fox population\nSM_df&lt;-filter(df,Island==\"SMI\")\n\n\n\n\n\n\nChallenges\n\n\n\n\n\n\nVaccinations\n\n\n\nAnalyse the interaction between Weight and Vaccinations\n\n\n\n\n\n\n\n\nBody Condition\n\n\n\nAnalyse the interaction between Weight and BodyCondition"
  },
  {
    "objectID": "competition.html#fox-rs",
    "href": "competition.html#fox-rs",
    "title": "Datathon: Competition",
    "section": "Fox Reproductive Status Analysis",
    "text": "Fox Reproductive Status Analysis\nThe ReproductiveStatus variable contains information of the Fox’s reproductive status when captures. This data is recorded as “N” (Not actively reproductive), “L” (Lactating), “SL” (Signs of Lactating), and “TD” (Testes Distended).\n\nDescriptive Statistics\n\nReproductive Status\nWe will use the table() and prop.table() function to get the frequencies and proportions for the ReproductiveStatus.\n\nrs_df &lt;- table(df$ReproductiveStatus) # Using the 'ReproductiveStatus' variable from the `df` data set, we count the frequencies of each category with the table function and storing it in rs_df.\nrs_df # Printing out the contents of \"rs_df\"\n\n\n   L   SL   TD   UN \n  18  244 1030  675 \n\n\nUsing the table() function, we can see that there are 3 common reproductive statuses by Fox: “L” at 18, “SL” at 244, “TD” at 1030, and “UN” at 675.\n\nprop.table(rs_df) # Computing the Proportions of \"rs_df\"\n\n\n          L          SL          TD          UN \n0.009150991 0.124046772 0.523640061 0.343162176 \n\n\nUsing the prop.table() function, we can see that that the most common status is “TD” at 52.4% and the least common is “L” at the 0.9%. Both “SL” and “UN” represent 12.4% and 34.3% of the data, respectively.\nWe can visualize the data using the ggplot functions:\n\nggplot(df) + # Setting up the data to create a plot.\n  geom_bar(aes(ReproductiveStatus)) # Creating a bar chart based on the variable \"ReproductiveStatus\"\n\n\n\n\n\n\n\n\nThe bar plot demonstrates that “TD” is the most common status in the data, and “L” is the least common status in the data.\n\n\n\n\n\n\nAnalysing Sex\n\n\n\nTake a moment to conduct the same analysis with the Sex variable.\n\n\n\n\n\nSex and Reproductive Status\nLet’s compare the frequencies between the variables Sex and Reproductive Status. We will be using the same table() function:\n\nxy_df &lt;- table(df$ReproductiveStatus, df$Sex)\n# Use the variables \"ReproductiveStatus\" and \"Sex\" from the \"df\" data set\n# Use the table function to compute the crosstabs\n# Store the results in the xy_df object\n\nxy_df # Print results out\n\n    \n     Female Male\n  L      18    0\n  SL    244    0\n  TD      0 1030\n  UN    661   14\n\n\nThe results show that certain categorical combinations between ReproductiveStatus and Sex are 0, which is to be expected. The category “UN” is found in both Male and Female foxes. Looking at Female foxes, The most common type is “UN”, followed by “SL”. For Male foxes, the most common type was “TD”.\nLet’s find the proportions for each the combination of the variables using the prop.table() function.\n\nprop.table(xy_df)\n\n    \n          Female        Male\n  L  0.009150991 0.000000000\n  SL 0.124046772 0.000000000\n  TD 0.000000000 0.523640061\n  UN 0.336044738 0.007117438\n\n\nWe can see that 52.4% of the data are Male and “TD” foxes, 33.6% of the data are Female and “UN” foxes, and 12.4% of the data are Female and “SL” foxes.\nLet’s visualize the variable ReproductiveStatus and Sex with a stacked bar plot:\n\nggplot(df) +\n  geom_bar(aes(Sex, fill = ReproductiveStatus))\n\n\n\n\n\n\n\n\nThe plot indicate which categories are most dominant in each sex. We can see that the most dominant reproductive status in Male foxes is testes distended. For Female foxes, we can see tha tthe most common reproductive status being unknown.\n\n\nChallenges\n\n\n\n\n\n\nAge Class\n\n\n\nAnalyse the interaction between ReproductiveStatus and AgeClass\n\n\n\n\n\n\n\n\nVaccinations\n\n\n\nAnalyse the interaction between ReproductiveStatus and Vaccinations\n\n\n\n\n\n\n\n\nCapture Type\n\n\n\nAnalyse the interaction between ReproductiveStatus and Capture Type"
  },
  {
    "objectID": "datathon_04911659.html",
    "href": "datathon_04911659.html",
    "title": "Datathon: Competition",
    "section": "",
    "text": "The Channel Islands are a chain of eight islands located off the southern coast of California in the Pacific Ocean. They are known for their stunning natural beauty, ecological richness, and deep cultural history.\n\n\n\nSan Miguel Island\nSanta Rosa Island\nSanta Cruz Island\nAnacapa Island\nSanta Barbara Island\nSan Nicolas Island\nSan Clemente Island\nSanta Catalina Island\n\n\n\n\n\nIncludes five islands: San Miguel, Santa Rosa, Santa Cruz, Anacapa, and Santa Barbara.\nSometimes called the “Galápagos of North America” for its rich biodiversity and many endemic species.\nAccessible only by boat or small plane.\nIdeal for hiking, kayaking, camping, and wildlife observation.\n\n\n\n\n\nOriginally inhabited by Chumash and Tongva indigenious groups for thousands of years.\nHome to important archaeological and cultural heritage sites."
  },
  {
    "objectID": "datathon_04911659.html#channel-islands",
    "href": "datathon_04911659.html#channel-islands",
    "title": "Datathon: Competition",
    "section": "",
    "text": "The Channel Islands are a chain of eight islands located off the southern coast of California in the Pacific Ocean. They are known for their stunning natural beauty, ecological richness, and deep cultural history.\n\n\n\nSan Miguel Island\nSanta Rosa Island\nSanta Cruz Island\nAnacapa Island\nSanta Barbara Island\nSan Nicolas Island\nSan Clemente Island\nSanta Catalina Island\n\n\n\n\n\nIncludes five islands: San Miguel, Santa Rosa, Santa Cruz, Anacapa, and Santa Barbara.\nSometimes called the “Galápagos of North America” for its rich biodiversity and many endemic species.\nAccessible only by boat or small plane.\nIdeal for hiking, kayaking, camping, and wildlife observation.\n\n\n\n\n\nOriginally inhabited by Chumash and Tongva indigenious groups for thousands of years.\nHome to important archaeological and cultural heritage sites."
  },
  {
    "objectID": "datathon_04911659.html#island-fox-urocyon-littoralis",
    "href": "datathon_04911659.html#island-fox-urocyon-littoralis",
    "title": "Datathon: Competition",
    "section": "Island Fox (Urocyon littoralis)",
    "text": "Island Fox (Urocyon littoralis)\nThe island fox is a small, charismatic canid species endemic to six of the eight Channel Islands off the coast of southern California. It’s one of the best examples of island dwarfism, having evolved from the mainland gray fox (Urocyon cinereoargenteus) to become significantly smaller.\nIn the 1990s, several island fox populations faced near extinction due to golden eagle predation, canine distemper virus, and habitat degradation. The island fox was listed as endangered in 2004. Recovery efforts of the island fox included removal of golden eagles, vaccination and captive breeding programs, reintroduction of native bald eagles, and habitat restoration."
  },
  {
    "objectID": "datathon_04911659.html#competition",
    "href": "datathon_04911659.html#competition",
    "title": "Datathon: Competition",
    "section": "Competition",
    "text": "Competition\nFor the competition, you will investigate one of the two sections, Fox Weight or Fox Reproductive Status. Follow the guidelines in the section of your choice and complete one of the challenges. You may also analyze the data in any other way or work on the other section, but it is not necessary. Afterwards, create a presentation using google slides. Share the slides to the lead instructor in the classroom. They will provide their email on the board.\n\nAnalysis\nUsing the tutorial and example analysis, complete at least one of the challenges.\n\n\nSlides and Presentation\nThe slides will be used for a presentation, in the last 30 minutes. You should have no more than 5 slides displaying what your findings are. Here is an example of the slides you should submit:\n\nTitle Slide\n\nCome up with a creative title for your analysis.\nInclude the names of all your group members.\nInclude Team Name\nProvide what you have analyzed\n\nNumerical Results\n\nProvide information about the results you found.\n\nPlots\n\nProvide any plots.\n\nConclusions\n\nAnswer your research question.\n\n\nAn Example can be found here."
  },
  {
    "objectID": "datathon_04911659.html#data-and-prep",
    "href": "datathon_04911659.html#data-and-prep",
    "title": "Datathon: Competition",
    "section": "Data and Prep",
    "text": "Data and Prep\nThe data provided is part of an ongoing longitudinal study from 2014 to 2016 of trap monitoring. This resulted in collection of 4,975 recorded trap observations, which may have contained a fox or not. Other information collected from the fox were Sex, Age Class, Weight, Body Condition, Reproductive Status, and Vaccinations. Information of the data collected can be found in the Databook.\nYou can download the data and script files here. (Password: dolphins_2025) Downolad, unzip file, load R project, and select “datathon.R” file to follow datathon document.For more help, watch this video\n\nInstalling and Loading Packages\n\ninstall.packages(\"tidyverse\")\nlibrary(tidyverse)\n\n\n\nLoading Data\nWe will need to load the data into R using the read_csv function.\n\ndf &lt;- cidf &lt;- read_csv(\"data_for_csuci_datathon_2014_2016.csv\") # Loads the Data Set into the objects df and cidf\n\n\n\nCleaning Data\n\nRenaming Categories\nLooking at the Databook, the variables Vaccinations, ReproductiveStatus and BodyCondition have interesting ways they are coded. In Vaccinations, missing values (NA) are considered as not vaccinated; therefore, changing the missing to “NV” will ensure that they are correctly classified, see data book. In ReproductiveStatus, the missing values (NA) indicate unknown reproductive status. In BodyCondition, the numerical values 1, 2, 3, 4, and 5, represent a condition. To make the condition easier, we will convert them to the categories. Run the code below to alter them:\n\ndf &lt;- df |&gt; mutate( # Will change the variables in the df data set\n    Vaccinations = case_when(is.na(Vaccinations) ~ \"NV\", .default = Vaccinations), # Reclassifies Missing Data in Vaccination as \"N\" per code book.\n    ReproductiveStatus = case_when(is.na(ReproductiveStatus) ~ \"UN\", .default = ReproductiveStatus), # Reclassifies Missing Data in Vaccination as \"N\" per code book.\n    BodyCondition = case_when( # Begins to modify BodyCondition\n        as.character(BodyCondition) == \"1\" ~ \"emaciated\", # Changes 1 to emaciated\n        as.character(BodyCondition) == \"2\" ~ \"thin\", # Changes 2 to thin\n        as.character(BodyCondition) == \"3\" ~ \"healthy wild\", # Changes 3 to healthy wild \n        as.character(BodyCondition) == \"4\" ~ \"extra fat reserves\", # Changes 4 to Extra Fat Reserve\n        as.character(BodyCondition) == \"5\" ~ \"extreme fat reserves\" # Changes 5 to Extreme Fat Reserves\n        )\n    )\n\n\n\nMissing Values\nSeveral variables in the data set may have missing values. Using the summary(), we can determine which variables have missing values by looking at the “NA’s” category.\n\nsummary(df)\n\n    Island           SamplingYear    GridCode        \n Length:4975        Min.   :2014   Length:4975       \n Class :character   1st Qu.:2014   Class :character  \n Mode  :character   Median :2015   Mode  :character  \n                    Mean   :2015                     \n                    3rd Qu.:2016                     \n                    Max.   :2016                     \n                                                     \n    TrapDate                       NightNumber      TrapNumber    \n Min.   :2014-07-16 00:00:00.00   Min.   :1.000   Min.   :  1.00  \n 1st Qu.:2014-08-24 00:00:00.00   1st Qu.:2.000   1st Qu.:  4.00  \n Median :2015-08-12 00:00:00.00   Median :3.000   Median :  8.00  \n Mean   :2015-08-25 01:31:27.92   Mean   :3.392   Mean   : 18.87  \n 3rd Qu.:2016-08-18 00:00:00.00   3rd Qu.:5.000   3rd Qu.: 11.00  \n Max.   :2016-11-30 00:00:00.00   Max.   :6.000   Max.   :108.00  \n                                                                  \n  TrapResult           Pittag          CaptureType            Sex           \n Length:4975        Length:4975        Length:4975        Length:4975       \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n                                                                            \n    AgeClass         Weight       Weight_units       BodyCondition     \n Min.   :0.000   Min.   :  0.72   Length:4975        Length:4975       \n 1st Qu.:1.000   1st Qu.:  1.73   Class :character   Class :character  \n Median :1.000   Median :  2.02   Mode  :character   Mode  :character  \n Mean   :1.557   Mean   : 49.49                                        \n 3rd Qu.:3.000   3rd Qu.:  2.30                                        \n Max.   :4.000   Max.   :910.00                                        \n NA's   :2840    NA's   :2808                                          \n ReproductiveStatus Vaccinations      \n Length:4975        Length:4975       \n Class :character   Class :character  \n Mode  :character   Mode  :character  \n                                      \n                                      \n                                      \n                                      \n\n\nWe notice that the variables AgeClass, Weight, and BodyCondition have missing values. For this analysis, we will remove the missing values (NA).\n\ndf &lt;- drop_na(df, AgeClass, Weight, BodyCondition) # Removes the missing values (NA) using the variables AgeClass, Weight, and BodyCondition\n\nAfter cleaning the data, this should result in 1,967 recorded foxes!\n\nnrow(df)\n\n[1] 1967"
  },
  {
    "objectID": "datathon_04911659.html#fox-weight",
    "href": "datathon_04911659.html#fox-weight",
    "title": "Datathon: Competition",
    "section": "Fox Weight Analysis",
    "text": "Fox Weight Analysis\nImagine you’re a field biologist tracking animal health across the remote Santa Rosa and San Miguel Islands. You’ve noticed that some animals seem heavier in certain years—but is it just your imagination, or is there a real trend?\nThe Weght variable contains information of the Fox’s weight in killogrgms. Let’s start by calculating the mean weight and standard deviation of weight using mean() and sd() functions:\n\nmean_weight&lt;-mean(df$Weight)\nsd_weight&lt;-sd(df$Weight)\nmean_weight\n\n[1] 1.940275\n\nsd_weight #printing the values\n\n[1] 0.4140872\n\n\nWe see that mean weght of fox is about 1.9 kg with standard deviation about .41 kg.\nWe will use the table() and prop.table() function to get the frequencies and proportions for the Sex.\n\ncount_df &lt;- table(df$Sex) # Using the 'Sex' variable from the `df` data set, we count the frequencies of each category with the table function and storing it in rs_df.\ncount_df # Printing out the contents of \"rs_df\"\n\n\nFemale   Male \n   923   1044 \n\n\nUsing the table() function, we can see that there are 923 female and 1044 male Foxes.\n\nprop.table(count_df) # Computing the Proportions of \"rs_df\"\n\n\n   Female      Male \n0.4692425 0.5307575 \n\n\nUsing the prop.table() function, we can see that that there are slightly more male Foxes (about 53%) vs. female Foxes (about 47%).\nWe can visualize the data using the ggplot functions:\n\nggplot(df) + # Setting up the data to create a plot.\n  geom_bar(aes(Sex)) # Creating a bar chart based on the variable \"ReproductiveStatus\"\n\n\n\n\n\n\n\n\nThe bar plot demonstrates that there are more males than females.\n\nWeight vs Sex\nLet’s visualize the variable Weight and Sex with a box plot using ggplot:\n\nggplot(df, aes(x = Sex, y = Weight)) +\n  geom_boxplot() +\n  labs(\n    title = \"Boxplot of Weight by Sex\",\n    x = \"Sex\",\n    y = \"Weight\"\n  )\n\n\n\n\n\n\n\n\nFrom the box plot we see that male Foxs are slightly heavier than female Foxes.\nWe can use group_by() function to separate male from female population and calculate mean and standard deviation separately:\n\nweight_summary &lt;- df %&gt;%\n  group_by(Sex) %&gt;%\n  summarise(\n    mean_weight = mean(Weight),\n    sd_weight = sd(Weight),\n    .groups = \"drop\"\n  )\nweight_summary\n\n# A tibble: 2 × 3\n  Sex    mean_weight sd_weight\n  &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt;\n1 Female        1.88     0.386\n2 Male          1.99     0.431\n\n\nThis table confirms that male Foxes are slightly heavier, about 1.99 kg, than female Foxes, about 1.88 kg, with standard deviations also slightly higher for male Foxes.\n\nWeight vs Sex over time\nTo see weight vs sex trend over time we can use group_by() and ggplot functions again:\n\nweight_summary_yearly &lt;- df %&gt;%\n  group_by(Sex, SamplingYear) %&gt;%\n  summarise(\n    mean_weight = mean(Weight, na.rm = TRUE),\n    sd_weight = sd(Weight, na.rm = TRUE),\n    .groups = \"drop\"\n  ) #group the data by Sex and Year and calculate mean and standard deviation of weight\nweight_summary_yearly\n\n# A tibble: 6 × 4\n  Sex    SamplingYear mean_weight sd_weight\n  &lt;chr&gt;         &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;\n1 Female         2014        1.95     0.362\n2 Female         2015        1.85     0.409\n3 Female         2016        1.86     0.373\n4 Male           2014        2.08     0.405\n5 Male           2015        1.95     0.451\n6 Male           2016        1.99     0.419\n\n\nFrom the table we see a downward trend in weight for both females and males. Let’s plot it on the graph:\n\nggplot(weight_summary_yearly, aes(x = SamplingYear, y = mean_weight)) +\n  geom_line() +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean_weight - sd_weight,\n                    ymax = mean_weight + sd_weight), width = 0.2) +\n  facet_wrap(~ Sex) +\n  labs(\n    title = \"Average Weight by Year and Sex\",\n    y = \"Mean Weight\",\n    x = \"Year\"\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWeight vs Sex over time by Island\n\n\n\nTake a moment to conduct the same analysis for different Islands separately and comment on the trends you see:\n\n#Santa Rosa Fox population \n\nSR_df&lt;-filter(df,Island==\"SRI\")\n\n#San Miguel Fox population\nSM_df&lt;-filter(df,Island==\"SMI\")\n\n\n\n\n\n\nChallenges\n\n\n\n\n\n\nVaccinations\n\n\n\nAnalyse the interaction between Weight and Vaccinations\n\n\n\n\n\n\n\n\nBody Condition\n\n\n\nAnalyse the interaction between Weight and BodyCondition"
  },
  {
    "objectID": "datathon_04911659.html#fox-rs",
    "href": "datathon_04911659.html#fox-rs",
    "title": "Datathon: Competition",
    "section": "Fox Reproductive Status Analysis",
    "text": "Fox Reproductive Status Analysis\nThe ReproductiveStatus variable contains information of the Fox’s reproductive status when captures. This data is recorded as “N” (Not actively reproductive), “L” (Lactating), “SL” (Signs of Lactating), and “TD” (Testes Distended).\n\nDescriptive Statistics\n\nReproductive Status\nWe will use the table() and prop.table() function to get the frequencies and proportions for the ReproductiveStatus.\n\nrs_df &lt;- table(df$ReproductiveStatus) # Using the 'ReproductiveStatus' variable from the `df` data set, we count the frequencies of each category with the table function and storing it in rs_df.\nrs_df # Printing out the contents of \"rs_df\"\n\n\n   L   SL   TD   UN \n  18  244 1030  675 \n\n\nUsing the table() function, we can see that there are 3 common reproductive statuses by Fox: “L” at 18, “SL” at 244, “TD” at 1030, and “UN” at 675.\n\nprop.table(rs_df) # Computing the Proportions of \"rs_df\"\n\n\n          L          SL          TD          UN \n0.009150991 0.124046772 0.523640061 0.343162176 \n\n\nUsing the prop.table() function, we can see that that the most common status is “TD” at 52.4% and the least common is “L” at the 0.9%. Both “SL” and “UN” represent 12.4% and 34.3% of the data, respectively.\nWe can visualize the data using the ggplot functions:\n\nggplot(df) + # Setting up the data to create a plot.\n  geom_bar(aes(ReproductiveStatus)) # Creating a bar chart based on the variable \"ReproductiveStatus\"\n\n\n\n\n\n\n\n\nThe bar plot demonstrates that “TD” is the most common status in the data, and “L” is the least common status in the data.\n\n\n\n\n\n\nAnalysing Sex\n\n\n\nTake a moment to conduct the same analysis with the Sex variable.\n\n\n\n\n\nSex and Reproductive Status\nLet’s compare the frequencies between the variables Sex and Reproductive Status. We will be using the same table() function:\n\nxy_df &lt;- table(df$ReproductiveStatus, df$Sex)\n# Use the variables \"ReproductiveStatus\" and \"Sex\" from the \"df\" data set\n# Use the table function to compute the crosstabs\n# Store the results in the xy_df object\n\nxy_df # Print results out\n\n    \n     Female Male\n  L      18    0\n  SL    244    0\n  TD      0 1030\n  UN    661   14\n\n\nThe results show that certain categorical combinations between ReproductiveStatus and Sex are 0, which is to be expected. The category “UN” is found in both Male and Female foxes. Looking at Female foxes, The most common type is “UN”, followed by “SL”. For Male foxes, the most common type was “TD”.\nLet’s find the proportions for each the combination of the variables using the prop.table() function.\n\nprop.table(xy_df)\n\n    \n          Female        Male\n  L  0.009150991 0.000000000\n  SL 0.124046772 0.000000000\n  TD 0.000000000 0.523640061\n  UN 0.336044738 0.007117438\n\n\nWe can see that 52.4% of the data are Male and “TD” foxes, 33.6% of the data are Female and “UN” foxes, and 12.4% of the data are Female and “SL” foxes.\nLet’s visualize the variable ReproductiveStatus and Sex with a stacked bar plot:\n\nggplot(df) +\n  geom_bar(aes(Sex, fill = ReproductiveStatus))\n\n\n\n\n\n\n\n\nThe plot indicate which categories are most dominant in each sex. We can see that the most dominant reproductive status in Male foxes is testes distended. For Female foxes, we can see tha tthe most common reproductive status being unknown.\n\n\nChallenges\n\n\n\n\n\n\nAge Class\n\n\n\nAnalyse the interaction between ReproductiveStatus and AgeClass\n\n\n\n\n\n\n\n\nVaccinations\n\n\n\nAnalyse the interaction between ReproductiveStatus and Vaccinations\n\n\n\n\n\n\n\n\nCapture Type\n\n\n\nAnalyse the interaction between ReproductiveStatus and Capture Type"
  },
  {
    "objectID": "tutorial.html",
    "href": "tutorial.html",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "",
    "text": "install.packages(\"tidyverse\")\nlibrary(tidyverse)"
  },
  {
    "objectID": "tutorial.html#r-is-a-calculator",
    "href": "tutorial.html#r-is-a-calculator",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "1.1 R is a calculator",
    "text": "1.1 R is a calculator\nWhat is \\(2+2\\)? R can do this for us in three different ways.\n\nMethod 1\nInput 2+2 into the console and press ENTER to obtain 4.\n\n2+2\n\n[1] 4\n\n\n\n\nMethod 2\nTry doing it from the script by following these steps:\n\nInput 2+2 into the script file.\nPressing CTRL+ENTER. (CMD+ENTER on a mac.)\n\nNow, look at the console and you will notice that the code “gets run” in the console.\n\n\nMethod 3\n\nGo back to the line for 2+2 in the script file, and click the RUN button.\n\n\n\nUsing Comments\nLines that start with a # are called comments and is not run. They are useful for making notes to yourself or to explain complex code.\nType each of these two lines into the script file and run them one-by-one.\n\n# Multiply 2 by 3 and then add 7\n2*3 + 7\n\n[1] 13\n\n\nYou do not need to type out the comments in this next example, but you should read them and run the code.\n\n# Calculate the average of four numbers.\n# First, we sum the numbers using parentheses, then divide by the count.\n(2 + 7 + 3 + 2) / 4\n\n[1] 3.5\n\n\nIn what follows, you do not necessarily need to type out all of the comments. However, it is considered “good coding practice” to add comments to your code. (Can you think of a couple of reasons as to why?)"
  },
  {
    "objectID": "tutorial.html#workflow-tips",
    "href": "tutorial.html#workflow-tips",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "1.2 Workflow Tips",
    "text": "1.2 Workflow Tips\n\nThink of the script as a whiteboard. You can adjust it as you need to.\n\nThe console can be used to run quick commands directly\n\nWhat if the 7 is instead a 9?\nInstead of typing out this code, go back and adjust (2 + 7 + 3 + 2) / 4) in the script. Then use CTRL + ENTER to run it.\n\n(2 + 9 + 3 + 2) / 4\n\n[1] 4\n\n\nYou can also recycle commands with the console:\n\nClick anywhere in the console, and press the up arrow on the keyboard. Keep pressing it and cycle through to see the commands you have ran.\nClick on the \"History\" tab in the upper right as another way to see previous commands. (Make sure to click back to \"Environment\"…we will be using it soon)\nYou can highlight multiple lines of code and run them at once. Right now, highlight all of your code and run it. Your resulting console should give output like this:\n\n\n2+2\n\n[1] 4\n\n# Multiply 2 by 3 and then add 7\n2*3 + 7\n\n[1] 13\n\n# Calculate the average of four numbers.\n# First, we sum the numbers using parentheses, then divide by the count.\n(2 + 9 + 3 + 2) / 4\n\n[1] 4\n\n\n\nWhite Space\n\nWhite space (empty lines) do not affect code. It is encouraged to make code more readable.\n\nInstead a script with no spaces, something like this is preferable:\n\n\n2+2\n\n# Multiply 2 by 3 and then add 7\n2*3 + 7\n\n# Calculate the average of four numbers.\n# First, we sum the numbers using parentheses, then divide by the count.\n(2 + 9 + 3 + 2) / 4"
  },
  {
    "objectID": "tutorial.html#using-functions",
    "href": "tutorial.html#using-functions",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "1.2 Using Functions",
    "text": "1.2 Using Functions\nR includes functions for other types of math\n\n# using a function: rounding numbers\nround(3.14)\n\n[1] 3\n\n\nAn argument is an input to a function. Functions can take in many arguments:\n\n# using a function with more arguments\nround(3.14, digits = 1)\n\n[1] 3.1\n\n\n\nNote on R Syntax\nHere are three ways to do the same thing. Can you see why this happens?\n\n# Method 1\nround(3.14, digits = 1)\n\n[1] 3.1\n\n# Method 2\nround(3.14,\n      digits = 1)\n\n[1] 3.1\n\n# Method 3\nround(3.14,\n      digits = 1\n)\n\n[1] 3.1\n\n\nR reads from left to right, line by line. If it does not see the end of a statement, then it will keep going onto the next line.\n\n\nChallenge 1\nWhat do you think this code will produce? Predict the answer yourself before running it.\n\n100 +\n  30 +\n  7\n\n\n\nSyntax Warning\n\n# Correct syntax\nround(3.14,\n  digits = 1)\n\n# Incorrect syntax: This will cause an error because the statement is not complete without \")\"\nround(3.14,\n  digits = 1\n\n# Incorrect syntax: This will cause an error because R is case sensitive.\nRound(3.14, \n  digits = 1)"
  },
  {
    "objectID": "tutorial.html#assigning-objects",
    "href": "tutorial.html#assigning-objects",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "1.3 Assigning Objects",
    "text": "1.3 Assigning Objects\n\n# assigning value to an object\nweight_kg &lt;- 55\n\nNow, look in the upper right and you will see weight_kg in the environment. This means we can use it in various ways:\n\n# recall object\nweight_kg\n\n[1] 55\n\n# multiply an object (convert kg to lb)\n2.2 * weight_kg\n\n[1] 121\n\n# assign converted weight in lbs\nweight_lb &lt;- 2.2 * weight_kg\n\n\n# reassign new value to an object\nweight_kg &lt;- 100\n\nAfter running the last code, notice that weight_kg changed in the environment panel.\n\nCAUTION:\nReminder: R is case sensitive. So it will treat weight_kg, Weight_kg, and WEIGHT_kg differently. (Try running the command Weight_kg. What error does it produce?)"
  },
  {
    "objectID": "tutorial.html#vectors",
    "href": "tutorial.html#vectors",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "1.4 Vectors",
    "text": "1.4 Vectors\nIn R, a vector can be thought of as a list (usually of numbers).\n\n# assign vector\nages &lt;- c(16, 18, 20, 22, 24) \n\n# recall vector\nages\n\n[1] 16 18 20 22 24\n\n\nAll sorts of functions can be applied to vectors:\n\n# how many things are in object?\nlength(ages)\n\n[1] 5\n\n\n\n# average the ages to obtain the mean: (16 + 18 + 20 + 22 + 24) / 5\nmean(ages)  # this is faster than typing out (16 + 18 + 20 + 22 + 24) / 5\n\n[1] 20\n\n\n\n# smallest and largest ages\nrange(ages)\n\n[1] 16 24\n\n\n\n# what are the ages if everyone becomes 5 years older?\nages + 5\n\n[1] 21 23 25 27 29\n\n# what are the ages if everyone is two times as old as they are now?\nages * 2\n\n[1] 32 36 40 44 48\n\n\n\nVectors of Words\nWords need to be put in quotation marks.\n\n# vector of foods\nfoods &lt;- c(\"pizza\", \"spaghetti\", \"steak\")\n\nfoods\n\n[1] \"pizza\"     \"spaghetti\" \"steak\"    \n\n# It doesn't make sense to take an average of the foods.\n# NA means \"Not Available\"\nmean(foods)\n\n[1] NA"
  },
  {
    "objectID": "tutorial.html#data-frame-functions-mpg",
    "href": "tutorial.html#data-frame-functions-mpg",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "2.1 Data Frame Functions (mpg)",
    "text": "2.1 Data Frame Functions (mpg)\nIn mpg,\n\neach row corresponds to an observation (in this case, a car)\neach column corresponds to a variable car characteristic\neach cell has a value\n\nHere are some things you can use to understand a data frame better:\n\n# get the variable  names\nnames(mpg)\n\n [1] \"manufacturer\" \"model\"        \"displ\"        \"year\"         \"cyl\"         \n [6] \"trans\"        \"drv\"          \"cty\"          \"hwy\"          \"fl\"          \n[11] \"class\"       \n\n# get the number of observations and variables.  dim means dimension\ndim(mpg)\n\n[1] 234  11\n\n# display the first 10 observations of the dataframe\nhead(mpg, 10)\n\n# A tibble: 10 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n\n# access a certain variable with a \"$\"\nmpg$hwy  # highway mpg\n\n  [1] 29 29 31 30 26 26 27 26 25 28 27 25 25 25 25 24 25 23 20 15 20 17 17 26 23\n [26] 26 25 24 19 14 15 17 27 30 26 29 26 24 24 22 22 24 24 17 22 21 23 23 19 18\n [51] 17 17 19 19 12 17 15 17 17 12 17 16 18 15 16 12 17 17 16 12 15 16 17 15 17\n [76] 17 18 17 19 17 19 19 17 17 17 16 16 17 15 17 26 25 26 24 21 22 23 22 20 33\n[101] 32 32 29 32 34 36 36 29 26 27 30 31 26 26 28 26 29 28 27 24 24 24 22 19 20\n[126] 17 12 19 18 14 15 18 18 15 17 16 18 17 19 19 17 29 27 31 32 27 26 26 25 25\n[151] 17 17 20 18 26 26 27 28 25 25 24 27 25 26 23 26 26 26 26 25 27 25 27 20 20\n[176] 19 17 20 17 29 27 31 31 26 26 28 27 29 31 31 26 26 27 30 33 35 37 35 15 18\n[201] 20 20 22 17 19 18 20 29 26 29 29 24 44 29 26 29 29 29 29 23 24 44 41 29 26\n[226] 28 29 29 29 28 29 26 26 26\n\n# average highway mpg of cars in the dataset\nmean(mpg$hwy)  \n\n[1] 23.44017\n\n\n\n# view the data frame like an excel spreadsheet\nView(mpg)\n\nYou can also use the environment instead of typing View(...). Do this now by clicking on mpg in the environment tab.\n\nChallenge 2:\nFind the average city miles per gallon for a car in the dataset and compare it to the average highway miles per gallon. Does the result surprise you?"
  },
  {
    "objectID": "tutorial.html#data-frame-filtering-with-subset-mpg",
    "href": "tutorial.html#data-frame-filtering-with-subset-mpg",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "2.2 Data Frame Filtering with subset (mpg)",
    "text": "2.2 Data Frame Filtering with subset (mpg)\n\n# Filtering cars with highway mileage greater than 30\nsubset(mpg, hwy &gt; 30)\n\n# Filtering cars that are rear wheel drive\nsubset(mpg, drv == \"r\")\n\n\n# Average hwy mpg of minivans\nminivans &lt;- subset(mpg, class == \"minivan\")\nmean(minivans$hwy)\n\n[1] 22.36364"
  },
  {
    "objectID": "tutorial.html#statistics-primer",
    "href": "tutorial.html#statistics-primer",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "2.3 Statistics Primer",
    "text": "2.3 Statistics Primer\n\nVariable Types\nThere are two main types of variables\n\nNumerical (or quantitative): Typically numbers; makes sense to add and average them.\nCategorical (or factor, or qualitative): Typically things that have names; does not make sense to add or average them.\n\n\n# engine size (displacement) is a numeric variable.\nmean(mpg$displ)  # average of engine sizes\n\n[1] 3.471795\n\nsum(mpg$displ)  # sum of engine sizes\n\n[1] 812.4\n\n# class, or \"type\" of car is a categorical variable\nmean(mpg$class)  # this will return an error\n\n[1] NA\n\nunique(mpg$class)  # gives the unique elements of car type (\"levels\" or \"categories\")\n\n[1] \"compact\"    \"midsize\"    \"suv\"        \"2seater\"    \"minivan\"   \n[6] \"pickup\"     \"subcompact\"\n\n\n\n\nChallenge 3:\n\nGive another numerical variable in mpg, and report its average.\nGive another categorical variable in mpg, and report its possible categories.\n\n\n\nTECHNICAL NOTE 1:\n(Feel free to run the code in the helper script and skip this part)\nWhen doing statistics, categorical variables should be stored as factor variables, which tells R that the words are more than just words and will be used for statistics. The Levels are the possible categories.\n\n# foods, as a character\nfoods\n\n[1] \"pizza\"     \"spaghetti\" \"steak\"    \n\n# foods, as a factor\nfactor(foods)\n\n[1] pizza     spaghetti steak    \nLevels: pizza spaghetti steak\n\n\nCategorical variables are usually already factor variables in R, but depending on how the data is imported, they may need to be converted. We need to do this with mpg.\n\n# Approach 1: tedious but straightforward\n# repeat this for each categorical variable\nmpg$manufacturer &lt;- as.factor(mpg$manufacturer)\n# ...\n\n\n# Approach 2: does it automatically, but the code is very complicated.\n# You can find this code in the helper script so you do not have to type it by hand.\nmpg[sapply(mpg, is.character)] &lt;- lapply(mpg[sapply(mpg, is.character)], \n                                                           as.factor)"
  },
  {
    "objectID": "tutorial.html#basic-plots",
    "href": "tutorial.html#basic-plots",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.1 Basic Plots",
    "text": "3.1 Basic Plots\n\nScatterplots\nScatterplots illustrate a relationship between two numeric variables.\n\n# Most common syntax\nggplot(mpg) + \n  geom_point(aes(x = cty, y = hwy))\n\n\n\n\n\n\n\n\n\n# Alternative syntax, can be too long (examples later)\nggplot(mpg) + geom_point(aes(x=cty, y = hwy))\n\n\n# Syntax to illustrate each part\nggplot(mpg) +             # We want to plot \"mpg\"\n  geom_point(             # Make a \"point\" plot (scatterplot)\n    aes(x=cty, y = hwy)   # Aesthetically, cty is on x-axis, hwy is on y-axis\n  )\n\naes(...) tells the plot what aesthetics you want it to have. Some examples of things to specify:\n\nx: variable to put on \\(x\\)-axis\ny: variable to put on \\(y\\)-axis\ncol: if you want to add color according to a certain variable\nsize: if you want to change the\n\n\n# Colored by car type\nggplot(mpg) + \n  geom_point(aes(x = cty, y = hwy, col = class))\n\n\n\n\n\n\n\n# Adding jitter is useful when data might overlap.\nggplot(mpg) + \n  geom_jitter(aes(x = cty, y = hwy, col = class))\n\n\n\n\n\n\n\n# You can also add labels\nggplot(mpg) + \n  geom_jitter(aes(x = cty, y = hwy, col = class)) +\n  xlab(\"City MPG\") +\n  ylab(\"Highway MPG\") +\n  ggtitle(\"Highway MPG vs City MPG Colored by Car Class\")\n\n\n\n\n\n\n\n\n\n\nCAUTION:\nUse geom_point unless the data is overlapping (common when the numeric values are forced to be whole numbers). Only use jitter when needed (otherwise the data is slightly misrepresented).\n\n\nChallenge 4:\nAnswer a couple of questions based on the plot just created.\n\nWhat pattern do you notice between city and highway MPG? In particular, suppose that you know a car has a relatively high city MPG. What is likely about its highway MPG?\nWhat class of cars tend to have the lowest MPG (in general)?\nWhat class of cars tend to have the highest MPG (in general)?"
  },
  {
    "objectID": "tutorial.html#five-number-summaries",
    "href": "tutorial.html#five-number-summaries",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.2 Five Number Summaries",
    "text": "3.2 Five Number Summaries\nA five number summary (and mean) helps summarize numeric variables. It is best motivated by looking at the data a certain way. Let’s represent each mpg as a point on a plot.\n\nsummary(mpg$hwy)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   18.00   24.00   23.44   27.00   44.00 \n\n\n\nThe minimum (Min.) highway mpg is 12. This represents the lowest data point in the dataset.\nThe maximum (Max.) highway mpg is 44. This is the highest value observed in the dataset.\nThe mean (Mean) highway mpg is 23.44. This is indicated by the arrow on the plot and can be thought of as the center of balance.\n\nIf the red arrow was moved to the left, then the right side would tip over. If it was moved to the right, then the left side would tip over.\n\nThe median (Median, 24), first quartile (1st Qu., 18) third quartile (3rd Qu., 27) divide the data into quarters (or, fourths).\n\nThe circles are the smallest.\nThe triangles are the next smallest.\nThe squares are the next.\nThe plus’s are next (so, they are the largest quarter of the data!)\n\n\nAnother way to think about it:\n\n25% of the data is at or below 1st Qu.\n50% of the data is at or below Median (so, half of the data is at or below the median, and the other half is above.)\n75% of the data is at or below 3rd Qu.\n\n(Note: the five number summary is Min, 1st Qu., Median, 3rd Qu., and Max. The mean is not considered as part of the “five number summary”.)\n\nBoxplot\nThe five number summary is also expressed as a boxplot:\n\n# Single Boxplot\nggplot(mpg) + \n  geom_boxplot(aes(y = hwy)) +   # boxplot with y axis as highway mpg\n  scale_x_discrete()             # optional, but makes it look better\n\n\n\n\n\n\n\n\nLook at the \\(y\\)-axis (hwy) and note that it matches the five number summary.\nThe dots represent outliers and are extreme values.\n\n\nBoxplot separated by categorical variable\n\n# Separate hwy by vehicle class\nggplot(mpg) + \n  geom_boxplot(aes(y = hwy, x = class)) \n\n\n\n\n\n\n\n# Add color (fill in the boxplot)\nggplot(mpg) + \n  geom_boxplot(aes(y = hwy, x = class, fill = class))"
  },
  {
    "objectID": "tutorial.html#summarizing-an-entire-dataset",
    "href": "tutorial.html#summarizing-an-entire-dataset",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.3 Summarizing an entire dataset",
    "text": "3.3 Summarizing an entire dataset\nsummary(mpg) gives some summary statistics for each column of the data frame mpg.\n\nNumeric variables: five number summary and mean\nCategorical variables: reports the count or frequency of occurrences of each type\n\n\n# Basic summary of each column\nsummary(mpg)\n\n     manufacturer                 model         displ            year     \n dodge     :37    caravan 2wd        : 11   Min.   :1.600   Min.   :1999  \n toyota    :34    ram 1500 pickup 4wd: 10   1st Qu.:2.400   1st Qu.:1999  \n volkswagen:27    civic              :  9   Median :3.300   Median :2004  \n ford      :25    dakota pickup 4wd  :  9   Mean   :3.472   Mean   :2004  \n chevrolet :19    jetta              :  9   3rd Qu.:4.600   3rd Qu.:2008  \n audi      :18    mustang            :  9   Max.   :7.000   Max.   :2008  \n (Other)   :74    (Other)            :177                                 \n      cyl               trans    drv          cty             hwy       \n Min.   :4.000   auto(l4)  :83   4:103   Min.   : 9.00   Min.   :12.00  \n 1st Qu.:4.000   manual(m5):58   f:106   1st Qu.:14.00   1st Qu.:18.00  \n Median :6.000   auto(l5)  :39   r: 25   Median :17.00   Median :24.00  \n Mean   :5.889   manual(m6):19           Mean   :16.86   Mean   :23.44  \n 3rd Qu.:8.000   auto(s6)  :16           3rd Qu.:19.00   3rd Qu.:27.00  \n Max.   :8.000   auto(l6)  : 6           Max.   :35.00   Max.   :44.00  \n                 (Other)   :13                                          \n fl             class   \n c:  1   2seater   : 5  \n d:  5   compact   :47  \n e:  8   midsize   :41  \n p: 52   minivan   :11  \n r:168   pickup    :33  \n         subcompact:35  \n         suv       :62  \n\n\nFor example, there are 62 SUV’s in the dataset and 11 minivans, and the average city mpg is 16.86.\n\n# Summary statistics for minivans.  \n#   Remember we defined \"minivans\" earlier?  Look in your environment!\nsummary(minivans)\n\n manufacturer          model               displ            year     \n Length:11          Length:11          Min.   :2.400   Min.   :1999  \n Class :character   Class :character   1st Qu.:3.300   1st Qu.:1999  \n Mode  :character   Mode  :character   Median :3.300   Median :1999  \n                                       Mean   :3.391   Mean   :2003  \n                                       3rd Qu.:3.800   3rd Qu.:2008  \n                                       Max.   :4.000   Max.   :2008  \n      cyl           trans               drv                 cty       \n Min.   :4.000   Length:11          Length:11          Min.   :11.00  \n 1st Qu.:6.000   Class :character   Class :character   1st Qu.:15.50  \n Median :6.000   Mode  :character   Mode  :character   Median :16.00  \n Mean   :5.818                                         Mean   :15.82  \n 3rd Qu.:6.000                                         3rd Qu.:17.00  \n Max.   :6.000                                         Max.   :18.00  \n      hwy             fl               class          \n Min.   :17.00   Length:11          Length:11         \n 1st Qu.:22.00   Class :character   Class :character  \n Median :23.00   Mode  :character   Mode  :character  \n Mean   :22.36                                        \n 3rd Qu.:24.00                                        \n Max.   :24.00                                        \n\n\n\nOther Summary Statistics\n\n# Table of counts separated by two categorical variables\ntable(mpg$class, mpg$drv)\n\n            \n              4  f  r\n  2seater     0  0  5\n  compact    12 35  0\n  midsize     3 38  0\n  minivan     0 11  0\n  pickup     33  0  0\n  subcompact  4 22  9\n  suv        51  0 11\n\n\nFor example, there are 12 compacts with 4 wheel drive, and all minivans (11) have front wheel drive."
  },
  {
    "objectID": "tutorial.html#other-plotting-tools",
    "href": "tutorial.html#other-plotting-tools",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.4 Other Plotting Tools",
    "text": "3.4 Other Plotting Tools\n\nHistograms\nHistograms are useful for numeric variables that can take decimal values (decimal valued variables are called “continuous”. Whole number valued are called “discrete”).\nThey “bin” the data into ranges.\n\n# Using 7 bins\nggplot(mpg) + \n  geom_histogram(aes(x = displ), bins = 7, col = \"black\") +  \n  xlab(\"Engine Size (Litres)\")\n\n\n\n\n\n\n\n\nSo there are roughly…\n\n49 engines with a size between (approximately) 1.4 to 2.3, (first “bin” or rectangle)\n65 engines with a size between (approximately) 2.3 to 3.2, (first “bin” or rectangle)\n49 engines with a size between (approximately) 3.2 to 4.1, (first “bin” or rectangle)\n\nand so forth.\nHistograms are helpful to describe the general shape (a visual summary) of a numeric variable. So we can see that the number of engines with large sizes are very small, and that number decreases very quickly. The majority of engines are around the 1 to 4 litre range.\nYou can change the number of bins that get used, but it will change the way the results are displayed.\n\nUse too few bins, and the data gets “over-summarized”.\nUse too many bins, and the results are too fine. It is hard to come up with general conclusions of the data.\n\n\n# 4 bins, over-summarized\nggplot(mpg) + \n  geom_histogram(aes(x = displ), bins = 4, col = \"black\") +  \n  xlab(\"Engine Size (Litres)\")\n\n\n\n\n\n\n\n# 30 bins, does not give good summary\nggplot(mpg) + \n  geom_histogram(aes(x = displ), bins = 30, col = \"black\") +  \n  xlab(\"Engine Size (Litres)\")\n\n\n\n\n\n\n\n# 9 bins, does a pretty good job\nggplot(mpg) + \n  geom_histogram(aes(x = displ), bins = 9, col = \"black\") +  \n  xlab(\"Engine Size (Litres)\")\n\n\n\n\n\n\n\n\nHere we can see the data “tails off” to the right, and the majority is around 2 and 3 size engines.\n\n\nFaceting\nFaceting is useful to display plots broken up by categorical variables.\n\n# No Facet\nggplot(mpg) + geom_point(aes(x = displ, y = hwy))\n\n\n\n\n\n\n\n# Facet by type\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy)) +\n  facet_wrap(~class)\n\n\n\n\n\n\n\n# Add color\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy, color = class)) +\n  facet_wrap(~class)\n\n\n\n\n\n\n\n\nYou can also add color without faceting, but it can be hard to tell what is going on when there are many categories.\n\nggplot(mpg) + \n  geom_point(aes(x = displ, y = hwy, col = class))\n\n\n\n\n\n\n\n\n\n\nDot Plots\nA dot plot is a simple way to display data using dots along a number line. Each dot represents one occurrence of a value in a data set. Dot plots are especially useful for small to moderate-sized data sets and give a clear visual of the distribution, frequency, and possible clusters or outliers in the data.\n\nKey Features:\n\nEach dot represents a data point.\nValues are placed along a horizontal axis.\nStacked dots indicate multiple occurrences of the same value.\nGood for comparing small groups or identifying patterns.\n\nDot plots are often used in statistics and education for easy interpretation of numerical data.\n\nggplot(mpg) + \n  geom_dotplot(aes(hwy)) +\n  labs(title = \"Dot Plot of Highway MPG\",\n       x = \"Highway MPG\",\n       y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\n\nChallenge 5\nUse the faceted scatterplot to determine what classes of cars have the best highway mpg. What can we say about the engine sizes of those cars?\nNow, try to answer the same question with the last scatterplot made (with color but without faceting). (It should be a harder question to answer…)\n\n\nSome additional examples\n\nggplot(mpg) + \n  geom_histogram(aes(x = hwy, fill = class), color = \"black\", bins = 14) + \n  facet_wrap(~class)\n\n\n\n\n\n\n\n\n\n# This is a good proof of concept, but produces some boxplots with too small\n#   of sample sizes to get a good summary of.\nggplot(mpg) + \n  geom_boxplot(aes(y = cty, x = drv, fill = class))"
  },
  {
    "objectID": "tutorial.html#frequencies-proportions",
    "href": "tutorial.html#frequencies-proportions",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.5 Frequencies Proportions",
    "text": "3.5 Frequencies Proportions\n\nWhat Are Frequencies?\nFrequencies represent the number of times a particular value or category appears in a dataset. They are raw counts and are often used as a starting point for descriptive statistics.\n\nExample:\nIn a survey of 100 people, if 60 say “Yes” and 40 say “No”, the frequencies are:\n\n“Yes” = 60\n\n“No” = 40\n\n\nFrequencies are useful for understanding the absolute size or quantity of a group.\n\n\nWhat Are Proportions?\nProportions express how large one part is relative to the whole. A proportion is the frequency of a category divided by the total number of observations.\n\nFormula:\n\\[\n\\text{Proportion} = \\frac{\\text{Frequency}}{\\text{Total Count}}\n\\]\nExample (continued):\nFrom the previous example:\n\nProportion of “Yes” = 60 / 100 = 0.6\n\nProportion of “No” = 40 / 100 = 0.4\n\n\nProportions can also be converted to percentages by multiplying by 100.\n\n\nKey Differences\n\n\n\n\n\n\n\n\nConcept\nDescription\nExample\n\n\n\n\nFrequency\nRaw count of occurrences\n“Yes” = 60\n\n\nProportion\nRelative frequency (part of the whole)\n“Yes” = 0.60\n\n\nPercentage\nProportion × 100\n“Yes” = 60%\n\n\n\n\n\nWhy Use Proportions?\n\nTo compare groups of different sizes\nTo visualize data more clearly (e.g., pie charts, bar graphs)\nTo interpret survey responses, population data, etc.\n\n\n\nIn R\nYou can compute frequencies with table() and proportions with prop.table():\n\n# Create a frequency table of the 'manufacturer' column in the 'mpg' dataset\nmanufacturer_table &lt;- table(mpg$manufacturer)\nmanufacturer_table  # Display the count of cars for each manufacturer\n\n\n      audi  chevrolet      dodge       ford      honda    hyundai       jeep \n        18         19         37         25          9         14          8 \nland rover    lincoln    mercury     nissan    pontiac     subaru     toyota \n         4          3          4         13          5         14         34 \nvolkswagen \n        27 \n\n\nThis tells you:\n\nDodge appears 37 times in the dataset — likely the most represented manufacturer.\nHonda appears only 9 times.\nThis gives a sense of which manufacturers are more prevalent in this dataset.\n\n\n# Convert the frequency table to proportions (relative frequencies)\nmanufacturer_prop &lt;- prop.table(manufacturer_table)\nmanufacturer_prop  # Display the proportion of cars for each manufacturer\n\n\n      audi  chevrolet      dodge       ford      honda    hyundai       jeep \n0.07692308 0.08119658 0.15811966 0.10683761 0.03846154 0.05982906 0.03418803 \nland rover    lincoln    mercury     nissan    pontiac     subaru     toyota \n0.01709402 0.01282051 0.01709402 0.05555556 0.02136752 0.05982906 0.14529915 \nvolkswagen \n0.11538462 \n\n\nThis tells you:\n\nToyota makes up about 14.5% of all the car entries in the dataset.\nAudi makes up 7.7%.\n\nThese are calculated as: manufacturer count / total number of entries."
  },
  {
    "objectID": "tutorial.html#bar-plots",
    "href": "tutorial.html#bar-plots",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.6 Bar Plots",
    "text": "3.6 Bar Plots\n\nWhat Is a Bar Plot?\nA bar plot is a type of chart that displays categorical data with rectangular bars. The length or height of each bar represents the count or value for that category.\n\n\nKey Features\n\nX-axis: Categories (e.g., car types, countries, months)\nY-axis: Frequency or value associated with each category\nNote: Both the X-axis and Y-axis may be reversed.\nBars can be vertical or horizontal\nCan be grouped or stacked to compare sub-categories\n\n\n\nWhen to Use:\n\nTo compare counts across categories\nTo visualize distributions of a single categorical variable\nTo show changes across groups or time (with discrete intervals)\n\nBar plots are easy to read and useful for summarizing and comparing categorical data.\n\n\nBar Plots in R\nBoth of the code chunks below provide 2 different ways to create a bar chart.\n\n# Create a bar plot showing the number of vehicles by manufacturer\nggplot(mpg, aes(x = manufacturer)) +  # Set 'manufacturer' on the x-axis (categorical variable)\n  geom_bar()                          # Automatically counts observations for each manufacturer and plots bars\n\n\n\n\n\n\n\n\n\n# Create a horizontal bar chart showing the number of vehicles by manufacturer\nggplot(mpg) +  # Sets 'mpg'\n  geom_bar(aes(y = manufacturer))                          # Automatically counts observations for each manufacturer and draws bars and sets 'manufacturer' to the y-axis (to create horizontal bars)\n\n\n\n\n\n\n\n\n\n\nInterpretation of the Bar Plot: Vehicle Count by Manufacturer\nThis horizontal bar chart displays the number of vehicle models per manufacturer in the mpg dataset. Each bar represents a car manufacturer, and the length of the bar reflects how many entries (vehicle models) that brand has in the dataset.\n\n\nKey Observations\n\nDodge has the most vehicles in the dataset.\nToyota Volkswagen and Ford also have a high number of entries.\nOther well-represented manufacturers include:\n\nChevrolet\nAudi\n\nManufacturers with the fewest vehicles include:\n\nLincoln\nMercury\nPontiac\nLand Rover\n\n\n\n\nInterpretation\n\nThis plot provides insight into which brands are most prevalent in the dataset.\nManufacturers like Dodge, Toyota, Ford, and Volkswagen have a larger presence, indicating either more vehicle lines or more representation in the data source.\nSmaller bars indicate fewer models or less coverage in the dataset."
  },
  {
    "objectID": "tutorial.html#contingency-tables",
    "href": "tutorial.html#contingency-tables",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.7 Contingency Tables",
    "text": "3.7 Contingency Tables\n\nWhat Is a Contingency Table?\nA contingency table (also called a cross-tabulation or crosstab) is a type of table that displays the frequency distribution of variables. It is commonly used to summarize the relationship between two or more categorical variables.\nEach cell in the table shows the number of observations that fall into the corresponding category combinations.\n\n\nWhy Use Contingency Tables?\nContingency tables help you:\n\nUnderstand the interaction between two categorical variables\nCompute proportions across rows, columns, or the entire table\nPerform statistical tests like the Chi-square test for independence\n\nSee if the variables are related to each other\n\n\n\n\nExample in R: Using the mpg Dataset\nWe’ll create a contingency table of drive type (drv) by vehicle class (class) using the table().\n\n# Create a contingency table of drive type (drv) by vehicle class\n# This counts how many observations fall into each combination of drv and class\nct &lt;- table(mpg$drv, mpg$class)\n\n# Print the contingency table\nct\n\n   \n    2seater compact midsize minivan pickup subcompact suv\n  4       0      12       3       0     33          4  51\n  f       0      35      38      11      0         22   0\n  r       5       0       0       0      0          9  11\n\n\nRow and Column Interpretation - drv: Drive type (Row) - f = front-wheel drive - r = rear-wheel drive - 4 = 4-wheel or all-wheel drive - class: Vehicle class (like compact, SUV, etc.) (Column)\n\nDrive Type: 4 (4-Wheel Drive)\n\nMost common in:\n\nSUVs (51)\nPickups (33)\n\nAlso present in:\n\nCompact (12)\nMidsize (3)\nSubcompact (4)\n\nAbsent in:\n\n2seater and Minivan\n\n\n\n4WD is most typical for SUVs and trucks\n\n\n\nDrive Type: f (Front-Wheel Drive)\n\nMost common in:\n\nMidsize (38)\nCompact (35)\nSubcompact (22)\n\nAlso found in:\n\nMinivan (11)\n\nAbsent in:\n\nSUV, Pickup, 2seater\n\n\n\nFWD is common in passenger vehicles, especially sedans, compacts, and minivans.\n\n\n\nDrive Type: r (Rear-Wheel Drive)\n\nMost common in:\n\nSUVs (11)\nSubcompact (9)\n2seater (5)\n\nAbsent in:\n\nCompact, Midsize, Minivan, Pickup\n\n\n\nRWD is rare overall but more typical in performance cars (e.g., 2seaters) and certain SUVs.\n\n\n\nSummary of Key Patterns\n\n\n\nClass\nMost Common Drive Type\n\n\n\n\nSUV\n4WD and RWD\n\n\nPickup\n4WD only\n\n\nMinivan\nFWD only\n\n\nCompact\nMostly FWD\n\n\nMidsize\nMostly FWD\n\n\nSubcompact\nMix of all types\n\n\n2seater\nOnly RWD\n\n\n\n\nFWD dominates among general passenger cars (compact, midsize, subcompact).\nRWD is least common but associated with performance or specialty vehicles.\n\n\n\n\nWhat Are Table Proportions?\nTable proportions are the relative frequencies calculated from a contingency table. Instead of showing raw counts, proportions express how much each cell contributes to the total — either:\n\nAs a proportion of the whole table\nWithin each row (row-wise)\nWithin each column (column-wise)\n\nThese proportions help you understand distributions and relationships in a more comparable way, especially when counts vary across groups.\n\n\nComputing Proportions in R\nUsing the contingency table we already have:\n\nct &lt;- table(mpg$drv, mpg$class)\n\nWe can abtain the proportions for the entire table with the following code and the prop.table() function:\n\nprop.table(ct)\n\n   \n       2seater    compact    midsize    minivan     pickup subcompact\n  4 0.00000000 0.05128205 0.01282051 0.00000000 0.14102564 0.01709402\n  f 0.00000000 0.14957265 0.16239316 0.04700855 0.00000000 0.09401709\n  r 0.02136752 0.00000000 0.00000000 0.00000000 0.00000000 0.03846154\n   \n           suv\n  4 0.21794872\n  f 0.00000000\n  r 0.04700855\n\n\n\ndrv = 4 (4-Wheel Drive)\n\n21.8% of 4WD vehicles are also SUVs\n14.1% are also pickups\nSmaller proportions in compact (5.1%) and subcompact (1.7%) classes\n0% in minivan and 2seater\n\ndrv = f (Front-Wheel Drive)\n\n16.2% of FWD vehicles are also midsize cars\n15.0% are also compact\n9.4% are also subcompacts\n4.7% are also minivans\n0% in SUV, pickup, and 2seater\n\ndrv = r (Rear-Wheel Drive)\n\n4.7% are also SUVs\n3.8% are also subcompacts\n2.1% are also 2seaters\n0% in all other categories"
  },
  {
    "objectID": "tutorial.html#stacked-bar-plot",
    "href": "tutorial.html#stacked-bar-plot",
    "title": "Practice Session: Coding, Stats, and R Basics",
    "section": "3.8 Stacked Bar Plot",
    "text": "3.8 Stacked Bar Plot\nA stacked bar plot (or stacked bar chart) is a type of bar graph used to visualize the composition of categories within groups.\nInstead of placing bars side by side (as in a grouped bar plot), a stacked bar plot stacks sub-categories on top of one another, all within a single bar.\n\nWhy Use a Stacked Bar Plot?\nA stacked bar plot helps you:\n\nCompare totals across groups (e.g., total sales per region)\nUnderstand sub-category composition within each group (e.g., product types within regions)\nSpot proportional trends visually (e.g., increasing share of a category over time)\n\n\n\nStacked Bar Plot in R\n\n# Create a stacked bar chart using the mpg dataset\nggplot(mpg) +  # Set 'mpg' as the data set on x-axis and fill bars by 'class'\n  geom_bar(aes(y = drv, fill = class))    # Plot counts as bars (defaults to count per group) and sets 'drv' on the y-axis and fill bars by 'class'\n\n\n\n\n\n\n\n\n\n# Create a stacked bar chart using the mpg dataset\nggplot(mpg) +  # Set 'mpg' as the data set on x-axis and fill bars by 'class'\n  geom_bar(aes(drv, fill = class))    # Plot counts as bars (defaults to count per group) and sets 'drv' on the x-axis and fill bars by 'class'\n\n\n\n\n\n\n\n\n\n\nInterpretation of Stacked Bar Plot: drv by class (Most Recent Plot)\nThis stacked bar chart shows the count of vehicles for each drive type (drv) in the mpg dataset, broken down by vehicle class (class).\n\nx-axis: Drive type (drv)\n\n4 = 4-wheel drive\nf = front-wheel drive\nr = rear-wheel drive\n\ny-axis: Count of vehicles\nFill color: Vehicle class (e.g., SUV, compact, pickup)\n\n\nDrive Type: 4 (4-Wheel Drive)\n\nDominated by:\n\nSUVs\nPickup trucks\n\nMinor presence of:\n\nSubcompacts\nMidsize\nCompacts\n\nNo 2seaters or minivans\n\n\n4WD is commonly used in SUVs and trucks for off-road or utility purposes.\n\n\n\nDrive Type: f (Front-Wheel Drive)\n\nDominated by:\n\nMidsize\nCompact\nSubcompact\nMinivans\n\nNo presence of:\n\nPickups\nSUVs\n2seaters\n\n\n\nFWD is typical for passenger vehicles designed for city or family driving.\n\n\n\n\nDrive Type: r (Rear-Wheel Drive)\n\nSmallest overall count\nIncludes:\n\n2seaters\nSubcompacts\nSUVs\n\nNo compact, midsize, pickup, or minivan\n\n\nRWD is less common, usually found in performance cars and some SUVs.\n\n\n\nKey Takeaway\nThis stacked bar plot effectively shows how vehicle classes are distributed across drive types. It helps identify which types of vehicles are associated with each drivetrain layout."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSUCI Datathon",
    "section": "",
    "text": "The CSUCI Datathon is an incredible opportunity for High School and Community College students to dive into the world of data science alongside professionals! Participants will explore cutting-edge data science topics in engaging sessions, gain insider knowledge on what it’s really like to be a data scientist from our expert panel, and then put their skills to the test in a thrilling datathon challenge using a surprise dataset. With a full day of learning, competition, exciting prizes, delicious food, and more, this event promises to be both educational and unforgettable!\nGuest Logins:\nUser: guest-datathon1 PW: Oliveactor40 User: guest-datathon2 PW: Goldblob19 User: guest-datathon3 PW: Loudfarm42 User: guest-datathon4 PW: Messyspy47 User: guest-datathon5 PW: Firstboot64 User: guest-datathon6 PW: Giantjade11"
  },
  {
    "objectID": "codebook_19052696.html",
    "href": "codebook_19052696.html",
    "title": "CSUCI Datathon",
    "section": "",
    "text": "Island\n\nThe Island that the fox was captured in.\n\nSRI - Santro Rosa Island\nSMI - San Miguel Island\n\n\nGridCode\n\nSRI - 18 grids (sites) trapped between July-Sept each year; each grid consists of 12 traps checked once each 24 hour period for 6 consecutive days\nSMI - 4 grids (sites) trapped Sept each year; each grid consists of 18 traps checked once each 24 hour period for 5 consecutive days\n\nTrapResult\n\nResult of the Trap\n\nOPEN - trap is open and undisturbed\nFOX - fox in trap\nSKUNK - skunk in trap\nCLOSED - trap closed but otherwise undisturbed\nRO - “raided open”, trap open, but bait is missing (bait can be removed by mice, insects, and birds, so does not necessarily indicate that target species visited the trap)\nRC - “raided closed”, trap closed, and bait missing\nES - “escaped skunk”, skunk slipped out through door crack before biologist arrived; we can tell a skunk was present in trap from trenching and nesting material inside trap\nEF - “escaped fox”, there was a fox in the trap but it escaped from the handler before a pittag could be recorded\n\n\nPittag\n\nUnique identifier given to each individual captured (same as a microchip that cats and dogs get, inserted under the skin)\n\nCaptureType\n\nN - first time ever captured, receives pittag\nP - previously pittaged, but first capture of the trapping season (July-January)\nR2 - recapture, has already been captured during this trapping session (grid)\nR1 - has already been captured this trapping season (July-January), but this is the first time this season it has been captured at this site (grid)\n\nVaccinations\n\nN or NA - received no vaccine\nR - received rabies vaccines\nD - received canine distemper vaccine\nC - received canine distemper vaccine\nRD - received rabies and canine distemper vaccine\nRC - received rabies and canine distemper vaccine\nSEN - this animal is a disease sentinel and will not receive vaccines during its lifetime\n\nReproductiveStatus\n\nN - not active(ly reproductive) has not had kits this season (for females, for males we cannot tell)\nL - lactating\nSL - signs of lactation (but no longer actively lactating) has had kits this season\nSV - there is one of these in the dataset and I think it is a mistake and should be SL\nTD - testes distended (male ready to breed, we do not record this often as we specifically do not trap during breeding season which is Feb-March)\n\nAgeClass\n\n0 - kit, born that year\n1, 2, 3, 4 - successive values given to record amount of tooth wear on molar, from 0 (none) to 4 (the most)"
  },
  {
    "objectID": "codebook.html",
    "href": "codebook.html",
    "title": "CSUCI Datathon",
    "section": "",
    "text": "Island\n\nThe Island that the fox was captured in.\n\nSRI - Santro Rosa Island\nSMI - San Miguel Island\n\n\nGridCode\n\nSRI - 18 grids (sites) trapped between July-Sept each year; each grid consists of 12 traps checked once each 24 hour period for 6 consecutive days\nSMI - 4 grids (sites) trapped Sept each year; each grid consists of 18 traps checked once each 24 hour period for 5 consecutive days\n\nTrapResult\n\nResult of the Trap\n\nOPEN - trap is open and undisturbed\nFOX - fox in trap\nSKUNK - skunk in trap\nCLOSED - trap closed but otherwise undisturbed\nRO - “raided open”, trap open, but bait is missing (bait can be removed by mice, insects, and birds, so does not necessarily indicate that target species visited the trap)\nRC - “raided closed”, trap closed, and bait missing\nES - “escaped skunk”, skunk slipped out through door crack before biologist arrived; we can tell a skunk was present in trap from trenching and nesting material inside trap\nEF - “escaped fox”, there was a fox in the trap but it escaped from the handler before a pittag could be recorded\n\n\nPittag\n\nUnique identifier given to each individual captured (same as a microchip that cats and dogs get, inserted under the skin)\n\nCaptureType\n\nN - first time ever captured, receives pittag\nP - previously pittaged, but first capture of the trapping season (July-January)\nR2 - recapture, has already been captured during this trapping session (grid)\nR1 - has already been captured this trapping season (July-January), but this is the first time this season it has been captured at this site (grid)\n\nVaccinations\n\nN or NA - received no vaccine\nR - received rabies vaccines\nD - received canine distemper vaccine\nC - received canine distemper vaccine\nRD - received rabies and canine distemper vaccine\nRC - received rabies and canine distemper vaccine\nSEN - this animal is a disease sentinel and will not receive vaccines during its lifetime\n\nReproductiveStatus\n\nN - not active(ly reproductive) has not had kits this season (for females, for males we cannot tell)\nL - lactating\nSL - signs of lactation (but no longer actively lactating) has had kits this season\nSV - there is one of these in the dataset and I think it is a mistake and should be SL\nTD - testes distended (male ready to breed, we do not record this often as we specifically do not trap during breeding season which is Feb-March)\n\nAgeClass\n\n0 - kit, born that year\n1, 2, 3, 4 - successive values given to record amount of tooth wear on molar, from 0 (none) to 4 (the most)"
  }
]